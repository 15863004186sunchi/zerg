// Code generated by protoc-gen-go.
// source: crawl.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	crawl.proto

It has these top-level messages:
	CrawlRequest
	CrawlResponse
	Metadata
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CrawlRequest struct {
	Url                string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Timeout            int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	CrawlFrequency     int64  `protobuf:"varint,3,opt,name=crawl_frequency" json:"crawl_frequency,omitempty"`
	OnlyReturnMetadata bool   `protobuf:"varint,4,opt,name=only_return_metadata" json:"only_return_metadata,omitempty"`
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CrawlResponse struct {
	Content      string    `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	IsFreshCrawl bool      `protobuf:"varint,2,opt,name=is_fresh_crawl" json:"is_fresh_crawl,omitempty"`
	Metadata     *Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CrawlResponse) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Length             uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	LastCrawlTimestamp int64  `protobuf:"varint,2,opt,name=last_crawl_timestamp" json:"last_crawl_timestamp,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*CrawlRequest)(nil), "protos.CrawlRequest")
	proto.RegisterType((*CrawlResponse)(nil), "protos.CrawlResponse")
	proto.RegisterType((*Metadata)(nil), "protos.Metadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Crawl service

type CrawlClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlClient struct {
	cc *grpc.ClientConn
}

func NewCrawlClient(cc *grpc.ClientConn) CrawlClient {
	return &crawlClient{cc}
}

func (c *crawlClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/protos.Crawl/Crawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawl service

type CrawlServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServer(s *grpc.Server, srv CrawlServer) {
	s.RegisterService(&_Crawl_serviceDesc, srv)
}

func _Crawl_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServer).Crawl(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Crawl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Crawl",
	HandlerType: (*CrawlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawl_Crawl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0xdd, 0xad, 0xd6, 0x3a, 0xfb, 0xc7, 0x25, 0xac, 0x52, 0x3c, 0x49, 0x11, 0xf4, 0x20,
	0x8b, 0xac, 0xe0, 0x55, 0x50, 0x58, 0x3c, 0xe8, 0x25, 0x2c, 0x78, 0x2c, 0xb1, 0x46, 0xb7, 0xd0,
	0x26, 0x35, 0x99, 0x22, 0x7b, 0xf0, 0x31, 0x7c, 0x01, 0x9f, 0xd4, 0x9d, 0x34, 0x59, 0xc4, 0x53,
	0x33, 0xdf, 0x37, 0xcd, 0xf7, 0xcb, 0x0c, 0x0c, 0x0a, 0x23, 0x3e, 0xab, 0x59, 0x63, 0x34, 0x6a,
	0x16, 0xbb, 0x8f, 0xcd, 0xbe, 0x7b, 0x30, 0xbc, 0x27, 0x9d, 0xcb, 0x8f, 0x56, 0x5a, 0x64, 0x13,
	0x88, 0x5a, 0x53, 0xa5, 0xbd, 0xd3, 0xde, 0xc5, 0x01, 0xa7, 0x23, 0x4b, 0x61, 0x1f, 0xcb, 0x5a,
	0xea, 0x16, 0xd3, 0xfe, 0x46, 0x8d, 0x78, 0x28, 0xd9, 0x39, 0x1c, 0xba, 0x3b, 0xf3, 0x37, 0x43,
	0x7f, 0xab, 0x62, 0x9d, 0x46, 0xae, 0x63, 0xec, 0xe4, 0x45, 0x50, 0xd9, 0x15, 0x4c, 0xb5, 0xaa,
	0xd6, 0xb9, 0x91, 0xd8, 0x1a, 0x95, 0xd7, 0x12, 0xc5, 0xab, 0x40, 0x91, 0xee, 0x6e, 0xba, 0x13,
	0xce, 0xc8, 0xe3, 0xce, 0x7a, 0xf2, 0x4e, 0xf6, 0x05, 0x23, 0x8f, 0x65, 0x1b, 0xad, 0xac, 0x24,
	0x8a, 0x42, 0x2b, 0x94, 0x0a, 0x3d, 0x5b, 0x28, 0xd9, 0x19, 0x8c, 0x4b, 0x4b, 0x08, 0x76, 0x95,
	0xbb, 0x5c, 0x87, 0x99, 0xf0, 0x61, 0x69, 0x17, 0x24, 0xba, 0x7b, 0xd8, 0x25, 0x24, 0xdb, 0x58,
	0x82, 0x1c, 0xcc, 0x27, 0xdd, 0x28, 0xec, 0x2c, 0x84, 0xf2, 0x6d, 0x47, 0xb6, 0x84, 0x24, 0xa8,
	0xec, 0x18, 0xe2, 0x4a, 0xaa, 0x77, 0x5c, 0xb9, 0xe0, 0x11, 0xf7, 0x15, 0x3d, 0xaa, 0x12, 0x16,
	0xbb, 0xcc, 0x9c, 0x66, 0x62, 0x51, 0xd4, 0x8d, 0x1f, 0x12, 0x23, 0xcf, 0x45, 0x2f, 0x83, 0x33,
	0xbf, 0x85, 0xbd, 0x0e, 0xe6, 0x26, 0x1c, 0xa6, 0x81, 0xe1, 0xef, 0x0e, 0x4e, 0x8e, 0xfe, 0xa9,
	0xdd, 0x08, 0xb2, 0x9d, 0xbb, 0xf8, 0xa7, 0x1f, 0x3d, 0x3c, 0x3e, 0xbf, 0x74, 0xdb, 0xbb, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x49, 0xb7, 0xc2, 0x4e, 0xd3, 0x01, 0x00, 0x00,
}
