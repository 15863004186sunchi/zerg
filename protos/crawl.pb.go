// Code generated by protoc-gen-go.
// source: crawl.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	crawl.proto

It has these top-level messages:
	CrawlRequest
	KV
	CrawlResponse
	Metadata
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Method int32

const (
	Method_GET      Method = 0
	Method_HEAD     Method = 1
	Method_POST     Method = 2
	Method_POSTFORM Method = 3
)

var Method_name = map[int32]string{
	0: "GET",
	1: "HEAD",
	2: "POST",
	3: "POSTFORM",
}
var Method_value = map[string]int32{
	"GET":      0,
	"HEAD":     1,
	"POST":     2,
	"POSTFORM": 3,
}

func (x Method) String() string {
	return proto.EnumName(Method_name, int32(x))
}
func (Method) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CrawlRequest struct {
	// 以 http:// 或者 https:// 开头的网址
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// 抓取超时限制，单位毫秒，设为 0 时无超时
	Timeout  int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	UseCache bool  `protobuf:"varint,3,opt,name=use_cache" json:"use_cache,omitempty"`
	// 单位毫秒，当页面抓取时间比当前时间早超过 recrawl_ttl（含）时重新抓取，当该值为 0 时始终重新抓取
	// 仅对 GET 和 HEAD 两类请求有效，POST 和 POSTFORM 始终重新抓取
	RecrawlTtl int64 `protobuf:"varint,4,opt,name=recrawl_ttl" json:"recrawl_ttl,omitempty"`
	// 是否仅返回 metadata 而忽略 content
	OnlyReturnMetadata bool `protobuf:"varint,5,opt,name=only_return_metadata" json:"only_return_metadata,omitempty"`
	// 请求的自定义 header
	Header []*KV `protobuf:"bytes,6,rep,name=header" json:"header,omitempty"`
	// 请求方法
	Method Method `protobuf:"varint,7,opt,name=method,enum=protos.Method" json:"method,omitempty"`
	// POST body，仅当请求类型为 POST 时有效
	PostBody string `protobuf:"bytes,8,opt,name=post_body" json:"post_body,omitempty"`
	BodyType string `protobuf:"bytes,9,opt,name=body_type" json:"body_type,omitempty"`
	// POST form，仅当请求类型为 POSTFORM 时有效
	FormValues []*KV `protobuf:"bytes,10,rep,name=form_values" json:"form_values,omitempty"`
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CrawlRequest) GetHeader() []*KV {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CrawlRequest) GetFormValues() []*KV {
	if m != nil {
		return m.FormValues
	}
	return nil
}

type KV struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CrawlResponse struct {
	Metadata     *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Content      string    `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	IsFreshCrawl bool      `protobuf:"varint,3,opt,name=is_fresh_crawl" json:"is_fresh_crawl,omitempty"`
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CrawlResponse) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Length             uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	LastCrawlTimestamp int64  `protobuf:"varint,2,opt,name=last_crawl_timestamp" json:"last_crawl_timestamp,omitempty"`
	Header             []*KV  `protobuf:"bytes,3,rep,name=header" json:"header,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	StatusCode         int32  `protobuf:"varint,5,opt,name=status_code" json:"status_code,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metadata) GetHeader() []*KV {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*CrawlRequest)(nil), "protos.CrawlRequest")
	proto.RegisterType((*KV)(nil), "protos.KV")
	proto.RegisterType((*CrawlResponse)(nil), "protos.CrawlResponse")
	proto.RegisterType((*Metadata)(nil), "protos.Metadata")
	proto.RegisterEnum("protos.Method", Method_name, Method_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Crawl service

type CrawlClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlClient struct {
	cc *grpc.ClientConn
}

func NewCrawlClient(cc *grpc.ClientConn) CrawlClient {
	return &crawlClient{cc}
}

func (c *crawlClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/protos.Crawl/Crawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawl service

type CrawlServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServer(s *grpc.Server, srv CrawlServer) {
	s.RegisterService(&_Crawl_serviceDesc, srv)
}

func _Crawl_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlServer).Crawl(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Crawl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Crawl",
	HandlerType: (*CrawlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawl_Crawl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0x5e, 0x9b, 0x35, 0x4d, 0xaf, 0x5d, 0x15, 0x59, 0x05, 0x59, 0xf0, 0xc0, 0x14, 0x21, 0x34,
	0xc1, 0x34, 0xa1, 0x4e, 0xe2, 0x15, 0xb1, 0xb2, 0x31, 0x69, 0x54, 0x43, 0x26, 0x2a, 0x8f, 0x56,
	0x96, 0x78, 0xa4, 0x22, 0x8d, 0x43, 0xec, 0x80, 0xfa, 0xc0, 0x9f, 0xe1, 0x1f, 0xf0, 0x83, 0xf8,
	0x2f, 0xf8, 0x1c, 0xa7, 0xaa, 0x40, 0x3c, 0xe5, 0xbe, 0xef, 0xb3, 0xef, 0xce, 0xf7, 0x5d, 0x60,
	0x9c, 0xd6, 0xc9, 0xf7, 0xe2, 0xac, 0xaa, 0xa5, 0x96, 0xc4, 0xb7, 0x1f, 0x15, 0xfd, 0xee, 0xc3,
	0x64, 0x81, 0x3c, 0x13, 0x5f, 0x1b, 0xa1, 0x34, 0x09, 0xc1, 0x6b, 0xea, 0x82, 0xf6, 0x8e, 0x7b,
	0x27, 0x23, 0x86, 0x21, 0xa1, 0x30, 0xd4, 0xeb, 0x8d, 0x90, 0x8d, 0xa6, 0x7d, 0xc3, 0x7a, 0xac,
	0x83, 0xe4, 0x31, 0x8c, 0x1a, 0x25, 0x78, 0x9a, 0xa4, 0xb9, 0xa0, 0x9e, 0xd1, 0x02, 0x16, 0x18,
	0x62, 0x81, 0x98, 0x3c, 0x81, 0x71, 0x2d, 0x6c, 0x49, 0xae, 0x75, 0x41, 0x0f, 0xed, 0x55, 0x70,
	0x54, 0xac, 0x0b, 0xf2, 0x12, 0x66, 0xb2, 0x2c, 0xb6, 0xbc, 0x16, 0xba, 0xa9, 0x4b, 0xbe, 0x11,
	0x3a, 0xc9, 0x12, 0x9d, 0xd0, 0x81, 0x4d, 0x44, 0x50, 0x63, 0x56, 0x5a, 0x3a, 0x85, 0x44, 0xe0,
	0xe7, 0x22, 0xc9, 0x44, 0x4d, 0xfd, 0x63, 0xef, 0x64, 0x3c, 0x87, 0xf6, 0x31, 0xea, 0xec, 0x66,
	0xc5, 0x9c, 0x42, 0x9e, 0x81, 0x6f, 0x32, 0xe5, 0x32, 0xa3, 0x43, 0x93, 0x67, 0x3a, 0x9f, 0x76,
	0x67, 0x96, 0x96, 0x65, 0x4e, 0xc5, 0xde, 0x2b, 0xa9, 0x34, 0xbf, 0x93, 0xd9, 0x96, 0x06, 0xf6,
	0xb5, 0x01, 0x12, 0x17, 0x06, 0xa3, 0x88, 0x3c, 0xd7, 0xdb, 0x4a, 0xd0, 0x51, 0x2b, 0x22, 0x11,
	0x1b, 0x4c, 0x5e, 0xc0, 0xf8, 0x5e, 0xd6, 0x1b, 0xfe, 0x2d, 0x29, 0xcc, 0xc4, 0x28, 0xfc, 0xd3,
	0x0a, 0xa0, 0xbc, 0xb2, 0x6a, 0x74, 0x0a, 0xfd, 0x9b, 0x15, 0x0e, 0xf5, 0x8b, 0xd8, 0x76, 0x43,
	0x35, 0x21, 0x99, 0xc1, 0xc0, 0xde, 0xb7, 0x23, 0x1d, 0xb1, 0x16, 0x44, 0x3f, 0xe0, 0xc8, 0x99,
	0xa1, 0x2a, 0x59, 0x2a, 0x41, 0x4e, 0x21, 0xd8, 0xcd, 0x05, 0x6f, 0x8f, 0xe7, 0xe1, 0xde, 0x7b,
	0x2c, 0xcf, 0x76, 0x27, 0xd0, 0xa9, 0x54, 0x96, 0x5a, 0x94, 0xda, 0xa5, 0xed, 0x20, 0x79, 0x0a,
	0xd3, 0xb5, 0xe2, 0xf7, 0xb5, 0x50, 0x39, 0xb7, 0x06, 0x38, 0xbb, 0x26, 0x6b, 0x75, 0x85, 0xa4,
	0xad, 0x1a, 0xfd, 0xea, 0x41, 0xb0, 0x1b, 0xf6, 0x43, 0xf0, 0x0b, 0x51, 0x7e, 0xd6, 0xb9, 0x2d,
	0x7c, 0xc4, 0x1c, 0x42, 0xdb, 0x8a, 0xc4, 0x0c, 0xce, 0x59, 0x6b, 0x56, 0x41, 0xe9, 0x64, 0x53,
	0xb9, 0xdd, 0x20, 0xa8, 0xd9, 0x6c, 0x71, 0xa7, 0xec, 0xd9, 0xe6, 0xfd, 0xd7, 0x36, 0x53, 0xcd,
	0x1c, 0xd6, 0x8d, 0xb2, 0x8b, 0x32, 0x62, 0x0e, 0xe1, 0x16, 0xb5, 0x11, 0x4f, 0x65, 0x26, 0xec,
	0x6e, 0x0c, 0x18, 0xb4, 0xd4, 0xc2, 0x30, 0xcf, 0xcf, 0xc1, 0x6f, 0x9d, 0x25, 0x43, 0xf0, 0xde,
	0x5d, 0xc6, 0xe1, 0x01, 0x09, 0xe0, 0xf0, 0xfa, 0xf2, 0xcd, 0xdb, 0xb0, 0x87, 0xd1, 0x87, 0xdb,
	0x8f, 0x71, 0xd8, 0x27, 0x13, 0x08, 0x30, 0xba, 0xba, 0x65, 0xcb, 0xd0, 0x9b, 0xbf, 0x86, 0x81,
	0xed, 0x91, 0xbc, 0xea, 0x82, 0x59, 0xd7, 0xd3, 0xfe, 0xcf, 0xf0, 0xe8, 0xc1, 0x5f, 0x6c, 0xeb,
	0x4a, 0x74, 0x70, 0xe1, 0xff, 0xec, 0x7b, 0xd7, 0xef, 0x3f, 0xdd, 0xb5, 0xbf, 0xd1, 0xf9, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x48, 0xc9, 0x73, 0x5c, 0x03, 0x00, 0x00,
}
